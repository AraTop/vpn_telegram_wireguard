import asyncio
import io
from datetime import datetime, timedelta, timezone
from decimal import Decimal
from typing import Optional, List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    Application,
)
from sqlalchemy import asc, select, func, and_, or_
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings
from app.database import async_session
import app.models as M
from app.models import Node, User, Tariff, Device, Payment
from app.utils import rub, gen_ref_code
from app.wg_api import WGEasyClient
from app.payments import YooKassaClient
from app.wg_api import WGEasyError
from zoneinfo import ZoneInfo
# === singletons ===
wg_client = WGEasyClient(settings.wg_url, settings.wg_password)
yk_client = YooKassaClient(settings.yk_shop_id, settings.yk_secret_key)
user_payment_tasks = {}
BOT_BROADCAST_HEADER = "üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç VPN-—Å–µ—Ä–≤–∏—Å–∞\n\n"  # —à–∞–ø–∫–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ ¬´–æ—Ç –±–æ—Ç–∞¬ª

# ---------------------------
# Small helpers (no stack)
# ---------------------------

async def pick_best_node(session: AsyncSession) -> M.Node | None:
    result = await session.execute(
        select(M.Node)
        .where(
            and_(
                M.Node.is_active == True,
                M.Node.load < M.Node.max_capacity  # <-- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
            )
        )
        .order_by(asc(M.Node.load))
    )
    return result.scalars().first()

def _extra_active(u: M.User) -> bool:
    return bool(u.extra_devices_until and u.extra_devices_until > datetime.now(timezone.utc))

def _base_quota(u: M.User) -> int:
    return int(u.device_quota or 0)

def _extra_quota(u: M.User) -> int:
    return int(u.extra_devices_count or 0) if _extra_active(u) else 0

def _has_extra(u: User) -> bool:
    return bool(
        getattr(u, "extra_devices_until", None)
        and u.extra_devices_until > datetime.now(timezone.utc)
        and (getattr(u, "extra_devices_count", 0) or 0) > 0
    )

def safe_username(u):
    return u.username if getattr(u, "username", None) else "‚Äî"

import html

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã
async def cancel_user_payment_check(user_id):
    if user_id in user_payment_tasks:
        user_payment_tasks[user_id].cancel()
        try:
            await user_payment_tasks[user_id]
        except asyncio.CancelledError:
            pass

async def auto_check_payment(application, payment_id: str, user_id: int, yk_client):
    start_time = asyncio.get_event_loop().time()
    timeout = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    print(f'üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è payment {payment_id}, user {user_id}')
    print(f'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {list(user_payment_tasks.keys())}')

    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            current_time = asyncio.get_event_loop().time()
            if current_time - start_time > timeout:
                # –í—Ä–µ–º—è –≤—ã—à–ª–æ, –æ—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                async with async_session() as session:
                    p = (await session.execute(
                        select(Payment).where(Payment.yk_payment_id == payment_id)
                    )).scalar_one_or_none()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await application.edit_message_text(
                            "‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                            "üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu:main")]
                            ])
                        )
                    except Exception:
                        pass
                return

            async with async_session() as session:
                p = (await session.execute(
                    select(Payment).where(Payment.yk_payment_id == payment_id)
                )).scalar_one_or_none()

                if not p:
                    return  # –ü–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

                try:
                    info = await yk_client.get_payment(payment_id)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                    await asyncio.sleep(15)
                    continue

                status = info.get("status", "pending")
                p.status = status
                p.updated_at = datetime.now(timezone.utc)
                
                # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
                time_left = int(timeout - (current_time - start_time))
                print(f'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}. –î–æ –æ—Ç–º–µ–Ω—ã: {time_left} —Å–µ–∫.')
                
                if status == "succeeded":
                    print('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
                    await _apply_successful_payment(session, p)
                    await session.commit()

                    try:
                        await application.edit_message_text(
                            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üè† –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")]
                            ])
                        )
                    except Exception:
                        pass
                    return

                elif status == "canceled":
                    print('‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
                    await session.commit()
                    try:
                        await application.edit_message_text(
                            "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="menu:tariffs")],
                                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu:main")]
                            ])
                        )
                    except Exception:
                        pass
                    return

            await asyncio.sleep(10)
            
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
        print(f"‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ auto_check_payment: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
        if user_id in user_payment_tasks and user_payment_tasks[user_id] == asyncio.current_task():
            del user_payment_tasks[user_id]
            print(f"üßπ –ó–∞–¥–∞—á–∞ –¥–ª—è user {user_id} –æ—á–∏—â–µ–Ω–∞")
        print(f'üìã –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: {list(user_payment_tasks.keys())}')

async def _render_admin_payments(query, tg_user_id: int, kind: str = "today"):
    # –ø—Ä–∞–≤–∞
    async with async_session() as session:
        admin = (await session.execute(select(User).where(User.tg_id == tg_user_id))).scalar_one_or_none()
        if not admin or not admin.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
            return

        start, end = _period_bounds(kind)
        conds = [Payment.status == "succeeded", Payment.created_at < end]
        if start is not None:
            conds.append(Payment.created_at >= start)

        total_count = (await session.execute(
            select(func.count(Payment.id)).where(and_(*conds))
        )).scalar_one()

        total_sum = (await session.execute(
            select(func.coalesce(func.sum(Payment.amount), 0)).where(and_(*conds))
        )).scalar_one()

        breakdown = (await session.execute(
            select(Payment.purpose,
                   func.count(Payment.id),
                   func.coalesce(func.sum(Payment.amount), 0))
            .where(and_(*conds))
            .group_by(Payment.purpose)
        )).all()

    # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    purpose_labels = {
        "TARIFF": "üßæ –ü–æ–¥–ø–∏—Å–∫–∏",
        "EXTRA_DEVICE": "üß© –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    }

    title = _payments_period_title(kind)

    lines = [
        f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ {html.escape(title)}</b>",
        "",
        f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{int(total_count)}</b>",
        f"–ù–∞ —Å—É–º–º—É: <b>{float(total_sum):.2f} ‚ÇΩ</b>",
    ]
    if breakdown:
        lines.append("")
        lines.append("üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for purpose, cnt, summ in breakdown:
            label = purpose_labels.get(purpose, f"‚Ä¢ {purpose}")
            lines.append(f"{label}: <b>{int(cnt)}</b> —à—Ç. / <b>{float(summ):.2f} ‚ÇΩ</b>")

    await query.edit_message_text("\n".join(lines), reply_markup=_payments_kbd(), parse_mode="HTML")

def _has_base(u: User) -> bool:
    return bool(u.subscription_until and u.subscription_until > datetime.now(timezone.utc))

async def _delete_peer_safe(wg_client: WGEasyClient, client_id: str | None):
    if not client_id:
        return
    try:
        await wg_client.delete_client(client_id)
    except Exception:
        # —É–∂–µ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ UI ‚Äî –Ω–æ—Ä–º
        pass

# handlers.py (–∏–ª–∏ –≥–¥–µ —É —Ç–µ–±—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è)
from sqlalchemy import and_
from datetime import datetime, timezone

async def enforce_user_devices(session, wg_client: WGEasyClient, user: M.User):
    now = datetime.now(timezone.utc)

    base_active = bool(user.subscription_until and user.subscription_until > now)
    base_quota  = (user.device_quota or 0) if base_active else 0
    extra_active_count = (
        user.extra_devices_count or 0
        if (user.extra_devices_until and user.extra_devices_until > now)
        else 0
    )

    #print(f"[enforce] uid={user.id} base_active={base_active} base_quota={base_quota} extra_active_count={extra_active_count}")

    # --- –±–∞–∑–æ–≤—ã–µ
    res = await session.execute(
        select(M.Device).where(and_(M.Device.user_id == user.id, M.Device.is_extra == False)).order_by(M.Device.created_at.asc())
    )
    base_devices = res.scalars().all()

    if not base_active:
        for d in base_devices:
            #print(f"[enforce] delete BASE device id={d.id} wg_id={d.wg_client_id}")
            await _delete_peer_safe(wg_client, d.wg_client_id)
            await session.delete(d)
        await session.commit()
    else:
        if len(base_devices) > base_quota:
            to_remove = base_devices[base_quota:]
            for d in to_remove:
                #print(f"[enforce] trim BASE device id={d.id} wg_id={d.wg_client_id}")
                await _delete_peer_safe(wg_client, d.wg_client_id)
                await session.delete(d)
            await session.commit()

    # --- –¥–æ–ø
    res = await session.execute(
        select(M.Device).where(and_(M.Device.user_id == user.id, M.Device.is_extra == True)).order_by(M.Device.created_at.asc())
    )
    extra_devices = res.scalars().all()

    if extra_active_count <= 0:
        for d in extra_devices:
            #print(f"[enforce] delete EXTRA device id={d.id} wg_id={d.wg_client_id}")
            await _delete_peer_safe(wg_client, d.wg_client_id)
            await session.delete(d)
        await session.commit()
    else:
        if len(extra_devices) > extra_active_count:
            to_remove = extra_devices[extra_active_count:]
            for d in to_remove:
                #print(f"[enforce] trim EXTRA device id={d.id} wg_id={d.wg_client_id}")
                await _delete_peer_safe(wg_client, d.wg_client_id)
                await session.delete(d)
            await session.commit()

def fmt_human(dt, tz_name: str = "Europe/Moscow") -> str:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç datetime –≤ –≤–∏–¥ 'DD.MM.YYYY HH:MM (TZ)'.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç naive/aware. –ï—Å–ª–∏ dt = None ‚Äî –≤–µ—Ä–Ω—ë—Ç '‚Äî'.
    """
    if not dt:
        return "‚Äî"
    if dt.tzinfo is None:
        # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC (–µ—Å–ª–∏ –∏–Ω–∞—á–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å —Ç—É—Ç)
        dt = dt.replace(tzinfo=timezone.utc)
    tz = ZoneInfo(tz_name)
    local = dt.astimezone(tz)
    return local.strftime("%d.%m.%Y %H:%M")

def kb(rows: list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(rows)

def back_to_main() -> List[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]

def back_to_admin() -> List[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")]

def _period_bounds(kind: str) -> tuple[datetime | None, datetime]:
    now = datetime.now(timezone.utc)
    if kind == "today":
        return now.replace(hour=0, minute=0, second=0, microsecond=0), now
    if kind == "month":
        return now.replace(day=1, hour=0, minute=0, second=0, microsecond=0), now
    if kind == "year":
        return now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0), now
    return None, now  # all

def _payments_period_title(kind: str) -> str:
    return {
        "today": "—Å–µ–≥–æ–¥–Ω—è",
        "month": "–∑–∞ –º–µ—Å—è—Ü",
        "year": "–∑–∞ –≥–æ–¥",
        "all": "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
    }.get(kind, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")

def _payments_kbd() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="admin:payments:period:today"),
            InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data="admin:payments:period:month"),
        ],
        [
            InlineKeyboardButton("üìÜ –ì–æ–¥", callback_data="admin:payments:period:year"),
            InlineKeyboardButton("üìÖ –í—Å—ë –≤—Ä–µ–º—è", callback_data="admin:payments:period:all"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:payments_list")],
    ])

async def require_admin(update, session) -> bool:
    me = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one_or_none()
    return bool(me and me.is_admin)

async def get_user_by_id(session, uid: int) -> User | None:
    return (await session.execute(select(User).where(User.id == uid))).scalar_one_or_none()

async def build_user_card(uid: int, show_devices: bool):
    async with async_session() as session:
        u = await get_user_by_id(session, uid)
        if not u:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", InlineKeyboardMarkup([back_to_admin()])

        now = datetime.now(timezone.utc)
        total_quota = max(0, int(u.total_quota() or 0))

        used = (await session.execute(
            select(func.count(Device.id)).where(Device.user_id == u.id)
        )).scalar_one() or 0

        free = max(0, total_quota - int(used))

        base_active  = bool(u.subscription_until and u.subscription_until > now)
        extra_active = bool(u.extra_devices_until and u.extra_devices_until > now)
        cnt = int(u.extra_devices_count or 0)

        title = f"{(u.first_name or '').strip()} {(u.last_name or '').strip()}".strip() or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        handle = f"@{u.username}" if u.username else "‚Äî"

        text = (
            f"üë§ *{title}*\n"
            f"ID: `{u.tg_id}`  |  {handle}\n\n"
            f"üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞:* {'–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + fmt_human(u.subscription_until) if base_active else '–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n"
            f"‚ûï *–î–æ–ø. —Å–ª–æ—Ç—ã:* "
            f"{('–∞–∫—Ç–∏–≤–Ω—ã –¥–æ ' + fmt_human(u.extra_devices_until) + f' (x{cnt})') if extra_active and cnt>0 else '–Ω–µ—Ç'}\n\n"
            f"üñ• *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:* {used} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ / {total_quota} –≤—Å–µ–≥–æ ‚Ä¢ —Å–≤–æ–±–æ–¥–Ω–æ: {free}\n"
            f"üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* {fmt_human(getattr(u, 'created_at', None))}\n"
        )

        if show_devices:
            devices = (await session.execute(
                select(Device).where(Device.user_id == u.id).order_by(Device.created_at.desc()).limit(10)
            )).scalars().all()
            if devices:
                lines = []
                for d in devices:
                    status = "‚úÖ" if d.enabled else "üö´"
                    kind = "‚ûï–¥–æ–ø" if d.is_extra else "üí≥–±–∞–∑–∞"
                    lines.append(f"‚Ä¢ `{d.wg_client_name}` {status} ‚Ä¢ {kind} ‚Ä¢ {fmt_human(d.created_at)}")
                text += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*\n" + "\n".join(lines)
            else:
                text += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:* ‚Äî"

        s = "1" if show_devices else "0"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï +7",  callback_data=f"admin:card:add_days:{uid}:7:{s}"),
             InlineKeyboardButton("‚ûï +30", callback_data=f"admin:card:add_days:{uid}:30:{s}"),
             InlineKeyboardButton("‚ûï +90", callback_data=f"admin:card:add_days:{uid}:90:{s}"),
             InlineKeyboardButton("‚ûï +365",callback_data=f"admin:card:add_days:{uid}:365:{s}")],
            [InlineKeyboardButton("–ö–≤–æ—Ç–∞ 1", callback_data=f"admin:card:set_quota:{uid}:1:{s}"),
             InlineKeyboardButton("2",       callback_data=f"admin:card:set_quota:{uid}:2:{s}"),
             InlineKeyboardButton("3",       callback_data=f"admin:card:set_quota:{uid}:3:{s}"),
             InlineKeyboardButton("5",       callback_data=f"admin:card:set_quota:{uid}:5:{s}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin:card:deactivate:{uid}:{s}")],
            [InlineKeyboardButton("‚ûï +1 –¥–æ–ø", callback_data=f"admin:card:addons_inc:{uid}:{s}"),
             InlineKeyboardButton("‚ûñ ‚àí1",     callback_data=f"admin:card:addons_dec:{uid}:{s}")],
            [InlineKeyboardButton("üìÜ +30 –¥–Ω–µ–π –¥–æ–ø", callback_data=f"admin:card:addons_extend:{uid}:{s}"),
             InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å –¥–æ–ø", callback_data=f"admin:card:addons_deact:{uid}:{s}")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" if s=="0" else "üîΩ –°–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                                  callback_data=f"admin:card:toggle_devices:{uid}:{s}")],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={u.tg_id}")],
            back_to_admin()
        ])
        return text, kb

async def render_user_card_view(query, uid: int, show_devices: bool):
    text, kb = await build_user_card(uid, show_devices)
    await query.edit_message_text(text, reply_markup=kb)

async def render_user_card_message(chat_id: int, u: User, update: Update, context: ContextTypes.DEFAULT_TYPE):
    text, kb = await build_user_card(u.id, show_devices=False)
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

from telegram.constants import ParseMode

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    text_in = (msg.text or "").strip()

    # 1) –∂–¥—ë–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏?
    if context.user_data.get("await_notify_text"):
        if not text_in:
            await msg.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return

        scope = context.user_data.get("notify_scope")
        if not scope:
            await msg.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è. –û—Ç–∫—Ä–æ–π—Ç–µ: üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            context.user_data.pop("await_notify_text", None)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        context.user_data["notify_text"] = text_in
        scope_h = (
            "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if scope == "active"
            else "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if scope == "inactive"
            else "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
        preview = (
            "üëÄ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä*\n\n"
            f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ *{scope_h}*.\n\n"
            f"{BOT_BROADCAST_HEADER}{text_in}"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin:notify:confirm:send")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",    callback_data="admin:notify:confirm:cancel")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",     callback_data="admin:notify")]
        ])
        await msg.reply_text(preview, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
        return

    # 2) –∏–Ω–∞—á–µ ‚Äî —Å—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username –∏–ª–∏ ID)
    if context.user_data.get("await_user_search_exact"):
        if not text_in:
            await msg.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ ID.")
            return

        is_username = text_in.startswith("@")
        is_id = text_in.isdigit()
        if not (is_username or is_id):
            await msg.reply_text("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å *—Ç–æ—á–Ω—ã–π* @username (—Å @) –∏–ª–∏ *—á–∏—Å–ª–æ–≤–æ–π* ID.", parse_mode=ParseMode.MARKDOWN)
            return

        async with async_session() as session:
            me = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one_or_none()
            if not me or not me.is_admin:
                await msg.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return

            if is_username:
                term = text_in[1:].lower()
                q = select(User).where(func.lower(User.username) == term).limit(1)
            else:
                q = select(User).where(User.tg_id == int(text_in)).limit(1)

            u = (await session.execute(q)).scalar_one_or_none()

        if not u:
            await msg.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @username –∏–ª–∏ ID.")
            return

        await render_user_card_message(update.effective_chat.id, u, update, context)
        context.user_data["await_user_search_exact"] = False
        return

from typing import Optional, List, Tuple
async def ensure_user(
    session: AsyncSession,
    tg_id: int,
    username: Optional[str],
    first: Optional[str],
    last: Optional[str],
    ref_code: Optional[str] = None,
) -> Tuple[User, List[Tuple[int, str]]]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user, notices),
    –≥–¥–µ notices ‚Äî —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π [(chat_id, text), ...] –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
        * –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à—ë–ª —Å–æ —Å—Å—ã–ª–∫–æ–π (ref_code —É–∫–∞–∑–∞–Ω), –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
          —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        * –ù–∏–∫–∞–∫–∏—Ö –±–æ–Ω—É—Å–æ–≤ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç:
        * –°–æ–∑–¥–∞—ë–º, –Ω–∞–∑–Ω–∞—á–∞–µ–º referral_code.
        * –ï—Å–ª–∏ ref_code –≤–∞–ª–∏–¥–µ–Ω (–∏ –Ω–µ self-ref):
            - –ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ settings.ref_trial_days –¥–Ω–µ–π,
              + –º–∏–Ω–∏–º—É–º 1 –±–∞–∑–æ–≤—ã–π —Å–ª–æ—Ç (device_quota >= 1).
            - –†–µ—Ñ–µ—Ä–µ—Ä—É: —Ñ–∏–∫—Å –Ω–∞ –±–∞–ª–∞–Ω—Å settings.ref_referrer_fixed_rub —Ä—É–±–ª–µ–π.
            - –í notices –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤–æ–º—É –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É).
    –°–æ–æ–±—â–µ–Ω–∏—è ‚Äî plain text (–±–µ–∑ Markdown/HTML), —á—Ç–æ–±—ã 100% –¥–æ—à–ª–∏.
    """
    notices: List[Tuple[int, str]] = []

    # 1) –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res = await session.execute(select(User).where(User.tg_id == tg_id))
    user = res.scalar_one_or_none()

    # --- –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢ ---
    if user is not None:
        # –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ-–∫–æ–¥—É, –Ω–æ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if ref_code:
            # –ù–∞–π–¥—ë–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞ (—á–∏—Å—Ç–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏, –Ω–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –±—É–¥–µ—Ç)
            r = await session.execute(select(User).where(User.referral_code == ref_code))
            owner = r.scalar_one_or_none()
            # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            # (–Ω–µ –≤–∞–∂–Ω–æ, —á–µ–π –∫–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ–∂–ª–∏–≤–æ —É–≤–µ–¥–æ–º–∏–º)
            notices.append((
                tg_id,
                (
                    "‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
                    "–£–≤—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                    "–ù–æ –≤—ã —É–∂–µ —Å –Ω–∞–º–∏ ‚Äî —Å–ø–∞—Å–∏–±–æ! üòä"
                )
            ))
        return user, notices

    # --- –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ---
    user = User(
        tg_id=tg_id,
        username=username,
        first_name=first,
        last_name=last,
        is_admin=(tg_id in settings.admin_ids),
        referral_code=gen_ref_code(),
    )
    session.add(user)
    await session.flush()  # –Ω—É–∂–µ–Ω user.id

    ref_owner = None
    if ref_code:
        r = await session.execute(select(User).where(User.referral_code == ref_code))
        ref_owner = r.scalar_one_or_none()
        # –ó–∞—â–∏—Ç–∞ –æ—Ç self-ref: –µ—Å–ª–∏ –∫–æ–¥ –µ–≥–æ –∂–µ, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
        if ref_owner and ref_owner.id == user.id:
            ref_owner = None

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–¥–∞ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
    if ref_owner:
        # 1) –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥—Ä—É–≥—É
        trial_days = int(getattr(settings, "ref_trial_days", 0) or 0)
        if trial_days > 0:
            now = datetime.now(timezone.utc)
            base_from = user.subscription_until or now
            if base_from < now:
                base_from = now
            user.subscription_until = base_from + timedelta(days=trial_days)
            # –º–∏–Ω–∏–º—É–º 1 –±–∞–∑–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ –≤—Ä–µ–º—è —Ç—Ä–∏–∞–ª–∞
            if (user.device_quota or 0) < 1:
                user.device_quota = 1

            until_txt = fmt_human(user.subscription_until) if user.subscription_until else "‚Äî"
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notices.append((
                tg_id,
                (
                    "üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {trial_days} –¥–Ω.\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until_txt}\n\n"
                    "üñ• –î–æ—Å—Ç—É–ø–µ–Ω 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–µ–Ω—é ¬´–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞¬ª."
                )
            ))

        # 2) –§–∏–∫—Å –Ω–∞ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        ref_fix = getattr(settings, "ref_referrer_fixed_rub", 0) or 0
        try:
            ref_fix_dec = Decimal(ref_fix)
        except Exception:
            ref_fix_dec = Decimal(0)
        if ref_fix_dec > 0:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å—É–º–º–∏—Ä—É–µ–º Decimal
            ref_owner.balance = (Decimal(ref_owner.balance) + ref_fix_dec)
            # –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –ø—Ä–∏—à–µ–¥—à–µ–≥–æ
            who = f"@{username}" if username else (first or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            notices.append((
                ref_owner.tg_id,
                (
                    "üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
                    f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {who}.\n"
                    f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: {int(ref_fix_dec)} ‚ÇΩ.\n"
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º! üôå"
                )
            ))

        # —Å–≤—è–∑–∫–∞
        user.referred_by_user_id = ref_owner.id

    await session.commit()
    return user, notices

# ---------------------------
# Menus (static parents)
# ---------------------------

def main_menu(user: User) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üí∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu:tariffs")],
        [InlineKeyboardButton("üñ• –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="menu:devices")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="menu:ref")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")]
    ]
    if user.is_admin:
        rows.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu:admin")])
    return kb(rows)

async def list_recipient_ids(session, scope: str) -> list[int]:
    now = datetime.now(timezone.utc)
    if scope == "all":
        q = select(User.tg_id)
    elif scope == "active":
        q = select(User.tg_id).where(active_clause(now))
    else:  # inactive
        q = select(User.tg_id).where(~active_clause(now))
    return [row[0] for row in (await session.execute(q)).all()]

async def count_recipients(session, scope: str) -> int:
    now = datetime.now(timezone.utc)
    if scope == "all":
        q = select(func.count(User.id))
    elif scope == "active":
        q = select(func.count(User.id)).where(active_clause(now))
    elif scope == "inactive":
        q = select(func.count(User.id)).where(~active_clause(now))
    else:
        return 0
    return (await session.execute(q)).scalar_one()

def active_clause(now):
    return or_(
        and_(User.subscription_until.is_not(None), User.subscription_until > now),
        and_(User.extra_devices_until.is_not(None), User.extra_devices_until > now),
    )

def notify_scope_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–º",   callback_data="admin:notify:scope:active")],
        [InlineKeyboardButton("‚ö™Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="admin:notify:scope:inactive")],
        [InlineKeyboardButton("üë• –í—Å–µ–º",       callback_data="admin:notify:scope:all")],
        back_to_admin()
    ])

def admin_menu() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")],
        [InlineKeyboardButton("üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin:notify")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users_list")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin:payments_list")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")],
    ]
    return kb(rows)

# ---------------------------
# Commands
# ---------------------------
async def _render_main_menu(query_or_message, tg_user):
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏, –ø–ª–∞—Ç–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –∏ —Å—á—ë—Ç—á–∏–∫–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –∏–∑ callback (edit), –∏ –∏–∑ /start (reply).
    """
    # 1) –ë–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    async with async_session() as session:
        u = (await session.execute(
            select(User).where(User.tg_id == tg_user.id)
        )).scalar_one()

        used = (await session.execute(
            select(func.count(Device.id)).where(Device.user_id == u.id)
        )).scalar_one()

    # 2) –ö–≤–æ—Ç—ã
    base_q = int(u.device_quota or 0) if _has_base(u) else 0
    extra_q = int(getattr(u, "extra_devices_count", 0) or 0) if _has_extra(u) else 0
    total_q = max(0, base_q + extra_q)

    # 3) –°—Ç–∞—Ç—É—Å—ã
    sub_line = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {fmt_human(u.subscription_until)}" if _has_base(u) else "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    extra_line = (
        f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {extra_q} (–¥–æ {fmt_human(getattr(u, 'extra_devices_until', None))})"
        if extra_q > 0 else
        "üí≥ –ü–ª–∞—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –Ω–µ—Ç"
    )
    devices_line = f"üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {used}/{total_q}  ¬∑  üÜì {base_q}  ¬∑  üí≥ {extra_q}"

    # 4) –¢–µ–∫—Å—Ç
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {tg_user.first_name}!\n\n"
        f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_line}\n"
        f"{extra_line}\n"
        f"{devices_line}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {rub(u.balance)}"
    )

    # 5) –ö–Ω–æ–ø–∫–∏
    kbd = main_menu(u)

    # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if hasattr(query_or_message, "edit_message_text"):  # CallbackQuery
        await query_or_message.edit_message_text(text, reply_markup=kbd)
    else:  # Message
        await query_or_message.reply_text(text, reply_markup=kbd)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ref = None
    if context.args and len(context.args) == 1:
        ref = context.args[0]

    async with async_session() as session:
        user, notices = await ensure_user(
            session,
            tg_id=update.effective_user.id,
            username=update.effective_user.username,
            first=update.effective_user.first_name,
            last=update.effective_user.last_name,
            ref_code=ref,
        )

    # —Ä–∞–∑–æ—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for chat_id, text in notices:
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
        except Exception as e:
            print(f"[referral notice] failed to send to {chat_id}: {e}")

    # —Ä–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    await _render_main_menu(update.effective_message, update.effective_user)

async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
        user = res.scalar_one_or_none()
    if not user or not user.is_admin:
        await update.effective_message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await update.effective_message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

# ---------------------------
# Callbacks (hard tree)
# ---------------------------

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    # ---- help ----
    if data == "menu:help":
        text = (
            "‚ùì *–ü–æ–º–æ—â—å*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
            "‚Ä¢ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã,\n"
            "‚Ä¢ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ,\n"
            "‚Ä¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.\n\n"
            "–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∞–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ üëá"
        )
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì° –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="help:how")],
            [InlineKeyboardButton("üß∞ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="help:troubleshoot")],
            [InlineKeyboardButton("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ª–∏–º–∏—Ç—ã", callback_data="help:devices")],
            [InlineKeyboardButton("‚ûï –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="help:addons")],
            [InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="help:support")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]
        ]), parse_mode="Markdown")
        return

    if data == "help:how":
        text = (
            "üì° *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN*\n\n"
            "1) üí∞ *–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É* ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ä–æ–∫ –∏ –æ–ø–ª–∞—Ç–∏.\n\n"
            "2) üñ• *–ó–∞–π–¥–∏ –≤ ¬´–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞¬ª* ‚Äî –æ—Ç–∫—Ä–æ–π —Ä–∞–∑–¥–µ–ª –≤ –±–æ—Ç–µ.\n\n"
            "3) ‚ûï *–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ¬ª* ‚Äî –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Ñ–∏–≥ (1 –∫–æ–Ω—Ñ–∏–≥ = 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ).\n"
            "   ‚Ä¢ –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ *–ø—Ä–∏—à—ë–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º* ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∞–π –µ–≥–æ.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ *–Ω–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏* ‚Äî –æ—Ç–∫—Ä–æ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –Ω–∞–∂–º–∏:\n"
            "     üì• *–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥* ‚Äî —Ñ–∞–π–ª *.conf* –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n"
            "     üóë *–£–¥–∞–ª–∏—Ç—å* ‚Äî –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ\n\n"
            "4) ‚öôÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∏ WireGuard* –Ω–∞ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (iOS/Android/Windows/macOS/Linux).\n\n"
            "5) üì≤ *–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–æ–Ω—Ñ–∏–≥* –≤ WireGuard:\n"
            "   ‚Ä¢ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª *.conf* (üì• –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞),\n"
            "6) üîå *–í–∫–ª—é—á–∏ —Ç—É–Ω–Ω–µ–ª—å* –≤ WireGuard ‚Äî –≥–æ—Ç–æ–≤–æ! –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ VPN.\n\n"
            "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç –±–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤; –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
            "‚Ä¢ –ù—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç? –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥ –∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π.\n"
            "‚Ä¢ –ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª ¬´üß∞ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç¬ª."
        )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:help")]]
            ),
            parse_mode="Markdown"
        )
        return

    if data == "help:troubleshoot":
        text = (
            "üß∞ *VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç*\n\n"
            "–î–µ–π—Å—Ç–≤—É–µ–º –ø–æ —à–∞–≥–∞–º ‚Äî –æ–±—ã—á–Ω–æ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:\n\n"
            "1) üîê *–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É.* –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ VPN –∑–∞–∫—Ä—ã—Ç.\n"
            "2) üìÑ *–û–±–Ω–æ–≤–∏ –∫–æ–Ω—Ñ–∏–≥.* –ó–∞–π–¥–∏ –≤ *üñ• –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞* ‚Üí –≤—ã–±–µ—Ä–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Üí "
            "–Ω–∞–∂–º–∏ üì• *–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥* (–∏–ª–∏ üóë *–£–¥–∞–ª–∏—Ç—å* –∏ ‚ûï *–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ* –∑–∞–Ω–æ–≤–æ).\n"
            "3) üîÅ *–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ VPN –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.* –í—ã–∫–ª—é—á–∏/–≤–∫–ª—é—á–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard, "
            "–∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Ç–µ–ª–µ—Ñ–æ–Ω/–∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n"
            "üö´ *–ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è*\n"
            "‚Ä¢ üåç –ü–æ–ø—Ä–æ–±—É–π *–¥—Ä—É–≥—É—é —Å–µ—Ç—å*: –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–º–µ—Å—Ç–æ Wi-Fi –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî "
            "–∏–Ω–æ–≥–¥–∞ —Å–µ—Ç—å –±–ª–æ–∫–∏—Ä—É–µ—Ç VPN.\n"
            "‚Ä¢ ‚è± –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ *–≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ-–≤—Ä–µ–º—è –∏ –∞–≤—Ç–æ-—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å* ‚Äî "
            "—Å–±–∏—Ç—ã–µ —á–∞—Å—ã –º–µ—à–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é.\n"
            "‚Ä¢ üì¥ –û—Ç–∫–ª—é—á–∏ –¥—Ä—É–≥–∏–µ VPN/–ø—Ä–æ–∫—Å–∏/–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã.\n\n"
            "üê¢ *–ú–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –æ–±—Ä—ã–≤—ã*\n"
            "‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –º–µ–∂–¥—É Wi-Fi –∏ –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Ç—å—é, –∑–∞–∫—Ä–æ–π —Ç—è–∂—ë–ª—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ–∂–µ–º üí¨"
        )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:help")]]
            ),
            parse_mode="Markdown"
        )
        return

    if data == "help:devices":
        text = (
            "üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ª–∏–º–∏—Ç—ã*\n\n"
            "‚Ä¢ –õ–∏–º–∏—Ç ¬´–≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ –ø–æ–¥–ø–∏—Å–∫—É¬ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–∞ (1/2/3/5).\n"
            "‚Ä¢ –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ñ–∏–≥ = 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
            "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞—Ç—å.\n"
            "‚Ä¢ –ï—Å–ª–∏ *–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è*, —Ç–æ *–≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≤—ã–¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ, —É–¥–∞–ª—è—é—Ç—Å—è*.\n"
            "‚Ä¢ *–î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞* (–∫—É–ø–ª–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ) –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å *–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏—Ö –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞*.\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ *–Ω–µ–ª—å–∑—è*, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:help")]]
            ),
            parse_mode="Markdown"
        )
        return

    if data == "help:addons":
        text = (
            "‚ûï *–î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞*\n\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: *100 ‚ÇΩ/–º–µ—Å* –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ *—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π* –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n"
            "‚Ä¢ –í—Å–µ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ä–æ–∫—É: –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–¥–∞—ë—Ç ¬´—è–∫–æ—Ä—å¬ª,\n"
            "  –∏ *–≤—Å–µ* –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–ø—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –≤ *–æ–¥–∏–Ω –¥–µ–Ω—å* ‚Äî —á–µ—Ä–µ–∑ ~1 –º–µ—Å—è—Ü –æ—Ç —è–∫–æ—Ä—è.\n"
            "‚Ä¢ –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ *–ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å*\n"
            "  –¥–æ –∫–æ–Ω—Ü–∞ —Å–≤–æ–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞, –∑–∞—Ç–µ–º *—É–¥–∞–ª—è—é—Ç—Å—è*.\n"
            "‚Ä¢ –ü–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, *–¥–æ–∫—É–ø–∞—Ç—å* –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–ª—å–∑—è."
        )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:help")]]
            ),
            parse_mode="Markdown"
        )
        return

    if data == "help:support":
        handle = "@AraTop4k"
        text = (
            "üí¨ *–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Ä—è–¥–æ–º –∏ –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ.\n\n"
            "üë§ *–ö–æ–º—É –ø–∏—Å–∞—Ç—å:* {handle}\n"
            "‚úçÔ∏è *–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n"
            "‚Ä¢ –≤–∞—à —Ç–∞—Ä–∏—Ñ (7/30/90/365)\n"
            "‚Ä¢ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî —Å–∫—Ä–∏–Ω/–æ—à–∏–±–∫—É\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
        ).format(handle=handle)

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üó®Ô∏è –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://t.me/AraTop4k")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:help")]
            ])
        )
        return

    # ---- MAIN ----
    if data == "menu:main":
        await _render_main_menu(update.callback_query, update.effective_user)
        return

    # ---- TARIFFS ----

    if data.startswith("menu:tariffs"):
        async with async_session() as session:
            res = await session.execute(
                select(Tariff).where(Tariff.is_active == True).order_by(Tariff.days)
            )
            tariffs = res.scalars().all()

        rows = [[InlineKeyboardButton(
                    f"{t.name} ‚Äî {rub(t.price)} ({t.max_devices} —É—Å—Ç—Ä.)",
                    callback_data=f"tariff:buy:{t.id}"
                )] for t in tariffs]
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])

        await query.edit_message_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(rows))
        return

    if data.startswith("tariff:buy:"):
        _, _, sid = data.split(":")
        tariff_id = int(sid)

        async with async_session() as session:
            t = await session.get(Tariff, tariff_id)
            if not t or not t.is_active:
                await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return

            u = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            if u.subscription_until and u.subscription_until > now:
                until = fmt_human(u.subscription_until)
                await query.edit_message_text(
                    f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {until}.\nüí∞ –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")]]),
                )
                return

            try:
                pay = await yk_client.create_payment(
                    float(t.price),
                    settings.currency,
                    f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {t.name} ({t.days} –¥–Ω–µ–π)",
                    settings.yk_return_url,
                    metadata={"tg_id": update.effective_user.id, "purpose": "TARIFF", "tariff_id": t.id},
                )
            except Exception as e:
                await query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂: {e}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")], back_to_main()]),
                )
                return

            confirmation_url = (pay.get("confirmation") or {}).get("confirmation_url")
            if not confirmation_url:
                await query.edit_message_text(
                    "‚ùå –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")], back_to_main()]),
                )
                return

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
            p = Payment(
                yk_payment_id=pay["id"],
                user_id=u.id,
                status=pay.get("status", "pending"),
                purpose="TARIFF",
                amount=float(t.price),
                currency=settings.currency,
                tariff_id=t.id,
                confirmation_url=confirmation_url,
                meta=pay.get("metadata") or {},
            )
            session.add(p)
            await session.commit()

            from datetime import datetime, timedelta
            end_date = datetime.now() + timedelta(days=t.days)
            formatted_date = end_date.strftime("%d.%m.%Y")
            # –ö—Ä–∞—Å–∏–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç
            check_list_text = f"""
üéØ –î–ï–¢–ê–õ–ò –í–ê–®–ï–ì–û –ó–ê–ö–ê–ó–ê

‚ú® –¢–∞—Ä–∏—Ñ: {t.name}
‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {t.days} –¥–Ω–µ–π (–¥–æ {formatted_date})
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–æ {t.max_devices} —à—Ç.

üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–∞—Ä–∏—Ñ–∞:
‚Ä¢ üöÄ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ VPN-—Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ üõ°Ô∏è 100% –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
‚Ä¢ üì∂ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–æ–≤
‚Ä¢ üîí –°–∫–≤–æ–∑–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤
‚Ä¢ üÜò –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {rub(t.price)}
‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: 10 –º–∏–Ω—É—Ç

üìù –£—Å–ª–æ–≤–∏—è:
‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —à–ª—é–∑
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ üéâ

üí´ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!
"""

            # –ö–Ω–æ–ø–∫–∏
            rows = []
            rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=confirmation_url)])
            
            if float(u.balance) >= t.price:
                rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º", callback_data=f"paybalance:TARIFF:{t.id}")])
            
            rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="menu:tariffs")])
            rows.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")])

            if u.id in user_payment_tasks:
                old_task = user_payment_tasks[u.id]
                old_task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
                try:
                    await old_task  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                except asyncio.CancelledError:
                    print(f"‚èπÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è user {u.id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏: {e}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
            user_payment_tasks[u.id] = asyncio.create_task(auto_check_payment(query, pay["id"], u.id, yk_client))

            await query.edit_message_text(
                check_list_text,
                reply_markup=InlineKeyboardMarkup(rows),
                parse_mode="Markdown"
            )
            return

    async def _render_devices_menu(query, user_id: int):
        # 1) –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        async with async_session() as session:
            u = (await session.execute(
                select(M.User).where(M.User.tg_id == user_id)
            )).scalar_one()

            res = await session.execute(
                select(M.Device).where(M.Device.user_id == u.id)
            )
            devices = list(res.scalars().all())

        # 2) –°—á–∏—Ç–∞–µ–º –∫–≤–æ—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        base_q = _base_quota(u)
        extra_q = _extra_quota(u)
        total_q = base_q + extra_q

        # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        devices.sort(key=lambda d: d.created_at or datetime.min.replace(tzinfo=timezone.utc))

        used_total = len(devices)
        used_base = min(used_total, base_q)
        used_paid = max(0, used_total - used_base)

        # 3) –¢–µ–∫—Å—Ç–æ–≤–∞—è —à–∞–ø–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if used_total == 0:
            header = (
                "üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
                f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: 0/{base_q}\n"
                f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: 0/{extra_q}\n"
                f"üìà –í—Å–µ–≥–æ: 0/{total_q}\n\n"
                "–ü–æ–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç."
            )
        else:
            header = (
                "üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
                f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: {used_base}/{base_q}\n"
                f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: {used_paid}/{extra_q}\n"
                f"üìà –í—Å–µ–≥–æ: {used_total}/{total_q}"
            )

        # 4) –ö–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî –∫–∞–∂–¥—É—é —è–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º
        rows: list[list[InlineKeyboardButton]] = []
        for idx, d in enumerate(devices, start=1):
            is_paid = idx > base_q  # –≤—Å—ë, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –±–∞–∑–æ–≤—É—é –∫–≤–æ—Ç—É ‚Äî –ø–ª–∞—Ç–Ω–æ–µ
            icon = "üí≥" if is_paid else "üÜì"
            title = f"{icon} {d.wg_client_name}"
            rows.append([InlineKeyboardButton(title, callback_data=f"device:view:{d.id}")])

        # 5) –î–µ–π—Å—Ç–≤–∏—è
        rows.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="device:add")])
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])

        await query.edit_message_text(header, reply_markup=InlineKeyboardMarkup(rows))


    if data == "menu:devices":
        await _render_devices_menu(query, update.effective_user.id)
        return

    if data == "device:add":
        async with async_session() as session:
            u: M.User = (await session.execute(select(M.User).where(M.User.tg_id == update.effective_user.id))).scalar_one()

            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            base_active = bool(u.subscription_until and u.subscription_until > now)
            if not base_active:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É. \nüñ• –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="menu:tariffs")],
                                    [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu:main")]]),
                )
                return

            # –ø–æ—Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –±–∞–∑–æ–≤—ã—Ö –∏ –¥–æ–ø.
            base_count = (await session.execute(
                select(func.count(M.Device.id)).where(M.Device.user_id == u.id, M.Device.is_extra == False)
            )).scalar_one()
            extra_count = (await session.execute(
                select(func.count(M.Device.id)).where(M.Device.user_id == u.id, M.Device.is_extra == True)
            )).scalar_one()

            base_quota = u.device_quota or 0
            extra_active_count = (u.extra_devices_count or 0) if (u.extra_devices_until and u.extra_devices_until > now) else 0

            # –†–µ—à–∞–µ–º, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if base_count < base_quota:
                # —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                node = await pick_best_node(session)
                if not node:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. \n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
                    return

                name = f"user{u.id}-{base_count+1}"
                peer = await wg_client.create_client(name=name)

                d = M.Device(
                    user_id=u.id,
                    wg_client_id=peer.get("id"),
                    wg_client_name=name,
                    is_extra=False,
                    node_id=node.id
                )
                session.add(d)
                node.load += 1
                await session.commit()

                # –æ—Ç—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                try:
                    cfg = await wg_client.get_config(d.wg_client_id)
                    bio = io.BytesIO(cfg.encode("utf-8"))
                    bio.name = f"{d.wg_client_name}.conf"
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
                except Exception:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ WG-Easy UI.")

                await _render_devices_menu(query, update.effective_user.id)
                return

            # –±–∞–∑–æ–≤–∞—è –∫–≤–æ—Ç–∞ –∑–∞–±–∏—Ç–∞ -> –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø?
            if extra_count < extra_active_count:
                # –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -> —Å–æ–∑–¥–∞—ë–º –¥–æ–ø
                name = f"user{u.id}-extra{extra_count+1}"
                peer = await wg_client.create_client(name=name)

                d = M.Device(
                    user_id=u.id,
                    wg_client_id=str(peer.get("id") or peer.get("clientId") or peer.get("_id")),
                    wg_client_name=peer.get("name", name),
                    is_extra=True,
                )
                session.add(d)
                await session.commit()

                try:
                    cfg = await wg_client.get_config(d.wg_client_id)
                    bio = io.BytesIO(cfg.encode("utf-8"))
                    bio.name = f"{d.wg_client_name}.conf"
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
                except Exception:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ WG-Easy UI.")

                await _render_devices_menu(query, update.effective_user.id)
                return

            # –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å
            from decimal import Decimal
            price = Decimal(settings.device_extra_price)
            pay = await yk_client.create_payment(
                float(price), settings.currency, "–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (1 –º–µ—Å.)", settings.yk_return_url,
                metadata={"tg_id": update.effective_user.id, "purpose": "EXTRA_DEVICE"}
            )
            p = M.Payment(
                yk_payment_id=pay["id"],
                user_id=u.id,
                status=pay.get("status", "pending"),
                purpose="EXTRA_DEVICE",
                amount=float(price),
                currency=settings.currency,
                confirmation_url=pay.get("confirmation", {}).get("confirmation_url", ""),
            )
            session.add(p)
            await session.commit()

            rows = []
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º"
            # –ö–Ω–æ–ø–∫–∞ YooKassa (–æ—Å–Ω–æ–≤–Ω–∞—è)
            rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=p.confirmation_url)])

            if Decimal(u.balance) >= price:
                rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º", callback_data="paybalance:EXTRA_DEVICE:-")])

            if u.id in user_payment_tasks:
                old_task = user_payment_tasks[u.id]
                old_task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
                try:
                    await old_task  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                except asyncio.CancelledError:
                    print(f"‚èπÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è user {u.id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏: {e}")

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            user_payment_tasks[u.id] = asyncio.create_task(auto_check_payment(query, pay["id"], u.id, yk_client))
            rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:devices")])
            rows.append([InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu:main")])

            await query.edit_message_text(
                (
                    "üîì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.\n"
                    f"‚ûï –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç –¥–ª—è 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ {rub(price)}.\n\n"
                    "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π.\n"
                    "‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: 10 –º–∏–Ω—É—Ç\n"
                    "üí° –í–∞–∂–Ω–æ: –≤—Å–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–ø-—Å–ª–æ—Ç—ã –∏–º–µ—é—Ç _–æ–±—â–∏–π_ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è. "
                    "–î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –∫—É–ø–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏, –æ–Ω–∏ –∏—Å—Ç–µ–∫—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî "
                    "–ø–æ –µ–¥–∏–Ω–æ–π –¥–∞—Ç–µ ¬´–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                    "‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, "
                    "–∞ —Å—Ä–æ–∫ –¥–æ–ø-—Å–ª–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–¥—Ç–∏."
                ),
                reply_markup=InlineKeyboardMarkup(rows),
                parse_mode="Markdown",
            )
            return

    if data.startswith("device:view:"):
        try:
            await query.answer()
        except Exception:
            pass
        _, _, sid = data.split(":")
        dev_id = int(sid)
        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
        if not d:
            await query.edit_message_text("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
            return
        rows = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"device:cfg:{dev_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"device:del:{dev_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:devices")],
        ]
        await query.edit_message_text(f"üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {d.wg_client_name}", reply_markup=InlineKeyboardMarkup(rows))
        return

    if data.startswith("device:cfg:"):
        _, _, sid = data.split(":")
        dev_id = int(sid)
        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
            if not d:
                await query.edit_message_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return
            try:
                cfg = await wg_client.get_config(d.wg_client_id)
                bio = io.BytesIO(cfg.encode("utf-8")); bio.name = f"{d.wg_client_name}.conf"
                await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
            except WGEasyError as e:
                # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å 404 ‚Äî –∑–Ω–∞—á–∏—Ç peer —É–∂–µ —É–¥–∞–ª—ë–Ω –≤ UI
                if " 404:" in str(e) or "Cannot find" in str(e):
                    await context.bot.send_message(chat_id=update.effective_chat.id,
                                                text="–ü–∏—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ WG-Easy. –£–¥–∞–ª—è—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã‚Ä¶")
                    await session.delete(d)
                    await session.commit()
                    # –í–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    await _render_devices_menu(query, update.effective_user.id)
                    return
                # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
            # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏–º –º–µ–Ω—é
            await _render_devices_menu(query, update.effective_user.id)
            return

    if data.startswith("device:del:"):
        try:
            await query.answer()
        except Exception:
            pass

        _, _, sid = data.split(":")
        dev_id = int(sid)

        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
            if not d:
                await query.edit_message_text(
                    "‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([back_to_main()])
                )
                return

            # –ë–µ—Ä–µ–º –Ω–æ–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if d.node_id:
                node = await session.get(M.Node, d.node_id)
            else:
                node = None

            if d.wg_client_id and node:
                node_client = WGEasyClient(node.api_url, node.api_password)
                try:
                    await node_client.delete_client(d.wg_client_id)
                    # —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    node.load = max(0, node.load - 1)
                except Exception as e:
                    await query.edit_message_text(
                        f"WG API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}",
                        reply_markup=InlineKeyboardMarkup([back_to_main()])
                    )
                    return
                finally:
                    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                    await node_client.close()

            await session.delete(d)
            await session.commit()

        await query.edit_message_text(
            "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üñ• –ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data="menu:devices")],
                back_to_main()
            ]),
        )
        return
    # ---- PAY BY BALANCE ----
    if data.startswith("paybalance:"):
        # —Ñ–æ—Ä–º–∞—Ç—ã: paybalance:TARIFF:<tariff_id>  –∏–ª–∏  paybalance:EXTRA_DEVICE:-
        _, purpose, sid = data.split(":")
        async with async_session() as session:
            u = (await session.execute(
                select(User).where(User.tg_id == update.effective_user.id)
            )).scalar_one()

            from decimal import Decimal
            from datetime import datetime, timezone

            if purpose == "TARIFF":
                tariff_id = int(sid)
                t = await session.get(Tariff, tariff_id)
                if not t:
                    await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return
                price = Decimal(str(t.price))
                if Decimal(u.balance) < price:
                    await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return

                # —Å–ø–∏—Å—ã–≤–∞–µ–º
                u.balance = (Decimal(u.balance) - price)

                # —Å–æ–∑–¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞—Ç–µ–∂ (succeeded)
                p = Payment(
                    yk_payment_id=None,
                    user_id=u.id,
                    status="succeeded",
                    purpose="TARIFF",
                    amount=float(price),
                    currency=settings.currency,
                    tariff_id=t.id,
                    confirmation_url=None,
                    meta={"paid_by_balance": True, "used_balance": float(price)},
                )
                session.add(p)
                await session.commit()

                # –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–æ
                await cancel_user_payment_check(u.id)
                await _apply_successful_payment(session, p)
                await session.commit()

                await query.edit_message_text(
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–æ–ø–ª–∞—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–º)",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu:main")]])
                )
                return

            if purpose == "EXTRA_DEVICE":
                price = Decimal(str(settings.device_extra_price))
                if Decimal(u.balance) < price:
                    await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return

                # —Å–ø–∏—Å—ã–≤–∞–µ–º
                u.balance = (Decimal(u.balance) - price)

                p = Payment(
                    yk_payment_id=None,
                    user_id=u.id,
                    status="succeeded",
                    purpose="EXTRA_DEVICE",
                    amount=float(price),
                    currency=settings.currency,
                    tariff_id=None,
                    confirmation_url=None,
                    meta={"paid_by_balance": True, "used_balance": float(price)},
                )
                session.add(p)
                await session.commit()
                
                # –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–º
                await cancel_user_payment_check(u.id)
                await _apply_successful_payment(session, p)
                await session.commit()

                await query.edit_message_text(
                    "‚úÖ –î–æ–ø. —Å–ª–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–ø–ª–∞—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–º)",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üñ• –ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data="menu:devices")]])
                )
                return
    # ---- REF ----
    if data == "menu:ref":
        async with async_session() as session:
            u = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one()
        me = await context.bot.get_me()
        deep = f"https://t.me/{me.username}?start={u.referral_code}"

        trial = settings.ref_trial_days
        ref_fix = settings.ref_referrer_fixed_rub

        txt = (
            "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"‚Ä¢ –î–∞–π –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É: {deep}\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ {trial} –¥–Ω. (–∞–≤—Ç–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è)\n"
            f"‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {ref_fix} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É\n\n"
            "–ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ–ø-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
            "–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º¬ª."
        )
        await query.edit_message_text(txt, reply_markup=InlineKeyboardMarkup([back_to_main()]))
        return

    # ---- ADMIN ----

    if data == "menu:admin":
        # –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞
        async with async_session() as session:
            res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
            user = res.scalar_one_or_none()
        if not user or not user.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
            return
        await query.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())
        return

    if data == "admin:notify":
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
                return
            # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop("notify_scope", None)
            context.user_data.pop("await_notify_text", None)
            context.user_data.pop("notify_text", None)

        text = (
            "üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∏–∂–µ."
        )
        await query.edit_message_text(text, reply_markup=notify_scope_kb())
        return

    # 2) –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if data.startswith("admin:notify:scope:"):
        scope = data.split(":")[3]  # active | inactive | all
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            n = await count_recipients(session, scope)

        context.user_data["notify_scope"] = scope
        context.user_data["await_notify_text"] = True
        scope_h = "–ê–∫—Ç–∏–≤–Ω—ã–µ" if scope == "active" else ("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ" if scope == "inactive" else "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        text = (
            "‚úçÔ∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {scope_h} (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {n})\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º (Markdown —Ä–∞–∑—Ä–µ—à—ë–Ω). "
            "–®–∞–ø–∫–∞ ¬´üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç VPN-—Å–µ—Ä–≤–∏—Å–∞¬ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:notify")]]))
        return

    # 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    if data.startswith("admin:notify:confirm:"):
        # admin:notify:confirm:<send|cancel>
        action = data.split(":")[3]
        scope = context.user_data.get("notify_scope")
        notify_text = context.user_data.get("notify_text")
        if action == "cancel":
            # —Å–±—Ä–æ—Å
            context.user_data.pop("await_notify_text", None)
            context.user_data.pop("notify_text", None)
            text = "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            await query.edit_message_text(text, reply_markup=notify_scope_kb())
            return

        if action == "send":
            if not (scope and notify_text):
                await query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", show_alert=True); return

            # –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏ —à–ª—ë–º
            async with async_session() as session:
                if not await require_admin(update, session):
                    await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
                ids = await list_recipient_ids(session, scope)

            sent = 0
            failed = 0
            header = BOT_BROADCAST_HEADER
            full_text = f"{header}{notify_text}"

            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —à–ª—ë–º, —É–≤–∞–∂–∞—è rate-limit
            for tg_id in ids:
                try:
                    await context.bot.send_message(tg_id, full_text)
                    sent += 1
                except Exception:
                    failed += 1
                await asyncio.sleep(0.05)  # –ª—ë–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥

            # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop("await_notify_text", None)
            context.user_data.pop("notify_text", None)

            result = (
                "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *{sent}*\n"
                f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: *{failed}*"
            )
            await query.edit_message_text(result, reply_markup=notify_scope_kb())
            return

    if data == "admin:users_list":
        # –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin:users")],
            back_to_admin()
        ])

        await query.edit_message_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=kb)
        return

    if data == "admin:users":
        async with async_session() as session:
            res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
            user = res.scalar_one_or_none()
            if not user or not user.is_admin:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return

        text = (
            "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ç–æ—á–Ω—ã–π* `@username` (—Å @) *–∏–ª–∏* —á–∏—Å–ª–æ–≤–æ–π *ID* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `@vasya` –∏–ª–∏ `123456789`."
        )
        context.user_data["await_user_search_exact"] = True
        await query.edit_message_text(
            text
        )
        return

    # –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
    if data.startswith("admin:user:"):
        uid = int(data.split(":")[2])
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
                return
        await render_user_card_view(query, uid, show_devices=False)
        return

    # –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    if data.startswith("admin:card:toggle_devices:"):
        _, _, _, uid, state = data.split(":")
        await render_user_card_view(query, int(uid), show_devices=(state == "0"))
        return

    # –ø—Ä–æ–¥–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if data.startswith("admin:card:add_days:"):
        _, _, _, uid, days, state = data.split(":")
        uid, days, show = int(uid), int(days), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            from datetime import datetime, timedelta, timezone
            now = datetime.now(timezone.utc)
            start = u.subscription_until if (u.subscription_until and u.subscription_until > now) else now
            u.subscription_until = start + timedelta(days=days)
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–æ—Ç—É
    if data.startswith("admin:card:set_quota:"):
        _, _, _, uid, quota, state = data.split(":")
        uid, quota, show = int(uid), int(quota), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            u.device_quota = max(0, quota)
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # –æ—Ç–∫–ª—é—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if data.startswith("admin:card:deactivate:"):
        _, _, _, uid, state = data.split(":")
        uid, show = int(uid), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            u.subscription_until = None
            u.device_quota = 0
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # +1 –¥–æ–ø-—Å–ª–æ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ)
    if data.startswith("admin:card:addons_inc:"):
        _, _, _, uid, state = data.split(":")
        uid, show = int(uid), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            from datetime import datetime, timedelta, timezone
            now = datetime.now(timezone.utc)
            base_active = bool(u.subscription_until and u.subscription_until > now)
            if not base_active:
                await query.answer("–ë–∞–∑–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –¥–æ–ø. —Å–ª–æ—Ç—ã –Ω–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å.", show_alert=True)
                await render_user_card_view(query, uid, show_devices=show)
                return
            u.extra_devices_count = max(0, int(u.extra_devices_count or 0) + 1)
            if not (u.extra_devices_until and u.extra_devices_until > now):
                u.extra_devices_until = now + timedelta(days=30)
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # -1 –¥–æ–ø-—Å–ª–æ—Ç
    if data.startswith("admin:card:addons_dec:"):
        _, _, _, uid, state = data.split(":")
        uid, show = int(uid), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            u.extra_devices_count = max(0, int(u.extra_devices_count or 0) - 1)
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ–ø-—Å–ª–æ—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π
    if data.startswith("admin:card:addons_extend:"):
        _, _, _, uid, state = data.split(":")
        uid, show = int(uid), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            from datetime import datetime, timedelta, timezone
            now = datetime.now(timezone.utc)
            start = u.extra_devices_until if (u.extra_devices_until and u.extra_devices_until > now) else now
            u.extra_devices_until = start + timedelta(days=30)
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ–ø-—Å–ª–æ—Ç—ã
    if data.startswith("admin:card:addons_deact:"):
        _, _, _, uid, state = data.split(":")
        uid, show = int(uid), (state == "1")
        async with async_session() as session:
            if not await require_admin(update, session):
                await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return
            u = await get_user_by_id(session, uid)
            if not u:
                await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
            u.extra_devices_count = 0
            u.extra_devices_until = None
            await session.commit()
        await render_user_card_view(query, uid, show_devices=show)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    if data.startswith("admin:payments:period:"):
        _, _, _, kind = data.split(":")  # today|month|year|all
        await _render_admin_payments(update.callback_query, update.effective_user.id, kind)
        return

    if data == "admin:payments_list":
        # –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin:payments")],
            back_to_admin()
        ])

        await query.edit_message_text("üí≥ –ü–ª–∞—Ç–µ–∂–∏", reply_markup=kb)
        return

    if data == "admin:payments":
        await _render_admin_payments(update.callback_query, update.effective_user.id, "today")
        return

    if data == "admin:stats":
        # –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ –∏ –≤ 'menu:admin'
        async with async_session() as session:
            res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
            admin = res.scalar_one_or_none()
        if not admin or not admin.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
            return
        from datetime import datetime, timezone
        # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º —Å–≤–æ–¥–∫—É + –∫–Ω–æ–ø–∫–∏
        async with async_session() as session:
            now = datetime.now(timezone.utc)

            # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            all_users = (await session.execute(select(func.count(User.id)))).scalar_one()

            # –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ò–õ–ò –∞–∫—Ç–∏–≤–Ω—ã –¥–æ–ø. —Å–ª–æ—Ç—ã
            users_active = (await session.execute(
                select(func.count(User.id)).where(
                    or_(
                        and_(User.subscription_until.is_not(None), User.subscription_until > now),
                        and_(User.extra_devices_until.is_not(None), User.extra_devices_until > now),
                    )
                )
            )).scalar_one()

            users_inactive = all_users - users_active

            # –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (enabled = true)
            active_devices = (await session.execute(
                select(func.count(Device.id)).where(Device.enabled.is_(True))
            )).scalar_one()

        text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{all_users}*\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_active}*\n"
            f"‚ö™Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_inactive}*\n"
            f"üñ• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: *{active_devices}*"
        )

        kb = InlineKeyboardMarkup([
            back_to_admin()
        ])
        await query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")
        return

    # catch-all
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))

# ---------------------------
# Background polling (optional)
# ---------------------------

async def _apply_successful_payment(session: AsyncSession, p: Payment) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É.
    - TARIFF: –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–≤–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É.
    - TOPUP: –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ —Ä–µ—à–∏—à—å –æ–ø—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å).
    - EXTRA_DEVICE: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–æ–º–µ—Å—è—á–Ω–æ), –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫.
    """
    u = await session.get(User, p.user_id)

    if p.purpose == "TARIFF" and p.tariff_id:
        t = await session.get(Tariff, p.tariff_id)
        now = datetime.now(timezone.utc)

        # –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        sub_until = u.subscription_until or now
        if sub_until < now:
            sub_until = now
        sub_until = sub_until + timedelta(days=t.days)
        u.subscription_until = sub_until

        # –∫–≤–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        u.device_quota = t.max_devices

        # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
        if u.referred_by_user_id:
            bonus = (Decimal(p.amount) * Decimal(     # p.amount ‚Äî float -> Decimal
                getattr(__import__("app.config", fromlist=["settings"]).config.settings, "referral_bonus_percent", 0)
            ) / Decimal(100)).quantize(Decimal("0.01"))
            ref_user = await session.get(User, u.referred_by_user_id)
            ref_user.balance = (Decimal(ref_user.balance or 0) + bonus)

    elif p.purpose == "TOPUP":
        u.balance = (Decimal(u.balance or 0) + Decimal(p.amount))

    elif p.purpose == "EXTRA_DEVICE":
        now = datetime.now(timezone.utc)

        # –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤: +30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–∞ (–∏–ª–∏ –æ—Ç —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ)
        current_until = u.extra_devices_until or now
        if current_until < now:
            current_until = now
        u.extra_devices_until = current_until + timedelta(days=30)

        # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        u.extra_devices_count = (u.extra_devices_count or 0) + 1

async def poll_pending_payments(context: ContextTypes.DEFAULT_TYPE):
    async with async_session() as session:
        res = await session.execute(select(Payment).where(Payment.status == "pending").order_by(Payment.created_at).limit(20))
        pending = res.scalars().all()
        for p in pending:
            try:
                info = await yk_client.get_payment(p.yk_payment_id)
            except Exception:
                continue
            status = info.get("status", "pending")
            if status != p.status:
                p.status = status
                p.updated_at = datetime.now(timezone.utc)
                if status == "succeeded":
                    await _apply_successful_payment(session, p)
        await session.commit()

# ---------------------------
# Registration
# ---------------------------
from telegram.ext import MessageHandler, filters
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(CallbackQueryHandler(on_callback))
