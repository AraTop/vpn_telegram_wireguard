import io
from datetime import datetime, timedelta, timezone
from decimal import Decimal
from typing import Optional, List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    Application,
)
from sqlalchemy import select, func, and_, or_
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings
from app.database import async_session
import app.models as M
from app.models import User, Tariff, Device, Payment
from app.utils import rub, gen_ref_code
from app.wg_api import WGEasyClient
from app.payments import YooKassaClient
from app.wg_api import WGEasyError
from zoneinfo import ZoneInfo
# === singletons ===
wg_client = WGEasyClient(settings.wg_url, settings.wg_password)
yk_client = YooKassaClient(settings.yk_shop_id, settings.yk_secret_key)

# ---------------------------
# Small helpers (no stack)
# ---------------------------

def _extra_active(u: M.User) -> bool:
    return bool(u.extra_devices_until and u.extra_devices_until > datetime.now(timezone.utc))

def _base_quota(u: M.User) -> int:
    return int(u.device_quota or 0)

def _extra_quota(u: M.User) -> int:
    return int(u.extra_devices_count or 0) if _extra_active(u) else 0

def _has_extra(u: User) -> bool:
    return bool(
        getattr(u, "extra_devices_until", None)
        and u.extra_devices_until > datetime.now(timezone.utc)
        and (getattr(u, "extra_devices_count", 0) or 0) > 0
    )

import html

async def _render_admin_payments(query, tg_user_id: int, kind: str = "today"):
    # –ø—Ä–∞–≤–∞
    async with async_session() as session:
        admin = (await session.execute(select(User).where(User.tg_id == tg_user_id))).scalar_one_or_none()
        if not admin or not admin.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
            return

        start, end = _period_bounds(kind)
        conds = [Payment.status == "succeeded", Payment.created_at < end]
        if start is not None:
            conds.append(Payment.created_at >= start)

        total_count = (await session.execute(
            select(func.count(Payment.id)).where(and_(*conds))
        )).scalar_one()

        total_sum = (await session.execute(
            select(func.coalesce(func.sum(Payment.amount), 0)).where(and_(*conds))
        )).scalar_one()

        breakdown = (await session.execute(
            select(Payment.purpose,
                   func.count(Payment.id),
                   func.coalesce(func.sum(Payment.amount), 0))
            .where(and_(*conds))
            .group_by(Payment.purpose)
        )).all()

    # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    purpose_labels = {
        "TARIFF": "üßæ –ü–æ–¥–ø–∏—Å–∫–∏",
        "EXTRA_DEVICE": "üß© –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "TOPUP": "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
    }

    title = _payments_period_title(kind)

    lines = [
        f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ {html.escape(title)}</b>",
        "",
        f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{int(total_count)}</b>",
        f"–ù–∞ —Å—É–º–º—É: <b>{float(total_sum):.2f} ‚ÇΩ</b>",
    ]
    if breakdown:
        lines.append("")
        lines.append("üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for purpose, cnt, summ in breakdown:
            label = purpose_labels.get(purpose, f"‚Ä¢ {purpose}")
            lines.append(f"{label}: <b>{int(cnt)}</b> —à—Ç. / <b>{float(summ):.2f} ‚ÇΩ</b>")

    await query.edit_message_text("\n".join(lines), reply_markup=_payments_kbd(), parse_mode="HTML")

def _has_base(u: User) -> bool:
    return bool(u.subscription_until and u.subscription_until > datetime.now(timezone.utc))

async def _delete_peer_safe(wg_client: WGEasyClient, client_id: str | None):
    if not client_id:
        return
    try:
        await wg_client.delete_client(client_id)
    except Exception:
        # —É–∂–µ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ UI ‚Äî –Ω–æ—Ä–º
        pass

# handlers.py (–∏–ª–∏ –≥–¥–µ —É —Ç–µ–±—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è)
from sqlalchemy import and_
from datetime import datetime, timezone

async def enforce_user_devices(session, wg_client: WGEasyClient, user: M.User):
    now = datetime.now(timezone.utc)

    base_active = bool(user.subscription_until and user.subscription_until > now)
    base_quota  = (user.device_quota or 0) if base_active else 0
    extra_active_count = (
        user.extra_devices_count or 0
        if (user.extra_devices_until and user.extra_devices_until > now)
        else 0
    )

    #print(f"[enforce] uid={user.id} base_active={base_active} base_quota={base_quota} extra_active_count={extra_active_count}")

    # --- –±–∞–∑–æ–≤—ã–µ
    res = await session.execute(
        select(M.Device).where(and_(M.Device.user_id == user.id, M.Device.is_extra == False)).order_by(M.Device.created_at.asc())
    )
    base_devices = res.scalars().all()

    if not base_active:
        for d in base_devices:
            #print(f"[enforce] delete BASE device id={d.id} wg_id={d.wg_client_id}")
            await _delete_peer_safe(wg_client, d.wg_client_id)
            await session.delete(d)
        await session.commit()
    else:
        if len(base_devices) > base_quota:
            to_remove = base_devices[base_quota:]
            for d in to_remove:
                #print(f"[enforce] trim BASE device id={d.id} wg_id={d.wg_client_id}")
                await _delete_peer_safe(wg_client, d.wg_client_id)
                await session.delete(d)
            await session.commit()

    # --- –¥–æ–ø
    res = await session.execute(
        select(M.Device).where(and_(M.Device.user_id == user.id, M.Device.is_extra == True)).order_by(M.Device.created_at.asc())
    )
    extra_devices = res.scalars().all()

    if extra_active_count <= 0:
        for d in extra_devices:
            #print(f"[enforce] delete EXTRA device id={d.id} wg_id={d.wg_client_id}")
            await _delete_peer_safe(wg_client, d.wg_client_id)
            await session.delete(d)
        await session.commit()
    else:
        if len(extra_devices) > extra_active_count:
            to_remove = extra_devices[extra_active_count:]
            for d in to_remove:
                #print(f"[enforce] trim EXTRA device id={d.id} wg_id={d.wg_client_id}")
                await _delete_peer_safe(wg_client, d.wg_client_id)
                await session.delete(d)
            await session.commit()

def fmt_human(dt, tz_name: str = "Europe/Moscow") -> str:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç datetime –≤ –≤–∏–¥ 'DD.MM.YYYY HH:MM (TZ)'.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç naive/aware. –ï—Å–ª–∏ dt = None ‚Äî –≤–µ—Ä–Ω—ë—Ç '‚Äî'.
    """
    if not dt:
        return "‚Äî"
    if dt.tzinfo is None:
        # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC (–µ—Å–ª–∏ –∏–Ω–∞—á–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å —Ç—É—Ç)
        dt = dt.replace(tzinfo=timezone.utc)
    tz = ZoneInfo(tz_name)
    local = dt.astimezone(tz)
    return local.strftime("%d.%m.%Y %H:%M")

def kb(rows: list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(rows)

def back_to_main() -> List[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]

def back_to_admin() -> List[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")]

def _period_bounds(kind: str) -> tuple[datetime | None, datetime]:
    now = datetime.now(timezone.utc)
    if kind == "today":
        return now.replace(hour=0, minute=0, second=0, microsecond=0), now
    if kind == "month":
        return now.replace(day=1, hour=0, minute=0, second=0, microsecond=0), now
    if kind == "year":
        return now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0), now
    return None, now  # all

def _payments_period_title(kind: str) -> str:
    return {
        "today": "—Å–µ–≥–æ–¥–Ω—è",
        "month": "–∑–∞ –º–µ—Å—è—Ü",
        "year": "–∑–∞ –≥–æ–¥",
        "all": "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
    }.get(kind, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")

def _payments_kbd() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="admin:payments:period:today"),
            InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data="admin:payments:period:month"),
        ],
        [
            InlineKeyboardButton("üìÜ –ì–æ–¥", callback_data="admin:payments:period:year"),
            InlineKeyboardButton("üìÖ –í—Å—ë –≤—Ä–µ–º—è", callback_data="admin:payments:period:all"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")],
    ])

from typing import Optional, List, Tuple
async def ensure_user(
    session: AsyncSession,
    tg_id: int,
    username: Optional[str],
    first: Optional[str],
    last: Optional[str],
    ref_code: Optional[str] = None,
) -> Tuple[User, List[Tuple[int, str]]]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user, notices),
    –≥–¥–µ notices ‚Äî —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π [(chat_id, text), ...] –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
        * –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏—à—ë–ª —Å–æ —Å—Å—ã–ª–∫–æ–π (ref_code —É–∫–∞–∑–∞–Ω), –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
          —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        * –ù–∏–∫–∞–∫–∏—Ö –±–æ–Ω—É—Å–æ–≤ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç:
        * –°–æ–∑–¥–∞—ë–º, –Ω–∞–∑–Ω–∞—á–∞–µ–º referral_code.
        * –ï—Å–ª–∏ ref_code –≤–∞–ª–∏–¥–µ–Ω (–∏ –Ω–µ self-ref):
            - –ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ settings.ref_trial_days –¥–Ω–µ–π,
              + –º–∏–Ω–∏–º—É–º 1 –±–∞–∑–æ–≤—ã–π —Å–ª–æ—Ç (device_quota >= 1).
            - –†–µ—Ñ–µ—Ä–µ—Ä—É: —Ñ–∏–∫—Å –Ω–∞ –±–∞–ª–∞–Ω—Å settings.ref_referrer_fixed_rub —Ä—É–±–ª–µ–π.
            - –í notices –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤–æ–º—É –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É).
    –°–æ–æ–±—â–µ–Ω–∏—è ‚Äî plain text (–±–µ–∑ Markdown/HTML), —á—Ç–æ–±—ã 100% –¥–æ—à–ª–∏.
    """
    notices: List[Tuple[int, str]] = []

    # 1) –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res = await session.execute(select(User).where(User.tg_id == tg_id))
    user = res.scalar_one_or_none()

    # --- –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢ ---
    if user is not None:
        # –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ-–∫–æ–¥—É, –Ω–æ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if ref_code:
            # –ù–∞–π–¥—ë–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞ (—á–∏—Å—Ç–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏, –Ω–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –±—É–¥–µ—Ç)
            r = await session.execute(select(User).where(User.referral_code == ref_code))
            owner = r.scalar_one_or_none()
            # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            # (–Ω–µ –≤–∞–∂–Ω–æ, —á–µ–π –∫–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ–∂–ª–∏–≤–æ —É–≤–µ–¥–æ–º–∏–º)
            notices.append((
                tg_id,
                (
                    "‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
                    "–£–≤—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                    "–ù–æ –≤—ã —É–∂–µ —Å –Ω–∞–º–∏ ‚Äî —Å–ø–∞—Å–∏–±–æ! üòä"
                )
            ))
        return user, notices

    # --- –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ---
    user = User(
        tg_id=tg_id,
        username=username,
        first_name=first,
        last_name=last,
        is_admin=(tg_id in settings.admin_ids),
        referral_code=gen_ref_code(),
    )
    session.add(user)
    await session.flush()  # –Ω—É–∂–µ–Ω user.id

    ref_owner = None
    if ref_code:
        r = await session.execute(select(User).where(User.referral_code == ref_code))
        ref_owner = r.scalar_one_or_none()
        # –ó–∞—â–∏—Ç–∞ –æ—Ç self-ref: –µ—Å–ª–∏ –∫–æ–¥ –µ–≥–æ –∂–µ, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
        if ref_owner and ref_owner.id == user.id:
            ref_owner = None

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–¥–∞ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
    if ref_owner:
        # 1) –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥—Ä—É–≥—É
        trial_days = int(getattr(settings, "ref_trial_days", 0) or 0)
        if trial_days > 0:
            now = datetime.now(timezone.utc)
            base_from = user.subscription_until or now
            if base_from < now:
                base_from = now
            user.subscription_until = base_from + timedelta(days=trial_days)
            # –º–∏–Ω–∏–º—É–º 1 –±–∞–∑–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ –≤—Ä–µ–º—è —Ç—Ä–∏–∞–ª–∞
            if (user.device_quota or 0) < 1:
                user.device_quota = 1

            until_txt = fmt_human(user.subscription_until) if user.subscription_until else "‚Äî"
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notices.append((
                tg_id,
                (
                    "üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {trial_days} –¥–Ω.\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until_txt}\n\n"
                    "üñ• –î–æ—Å—Ç—É–ø–µ–Ω 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–µ–Ω—é ¬´–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞¬ª."
                )
            ))

        # 2) –§–∏–∫—Å –Ω–∞ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        ref_fix = getattr(settings, "ref_referrer_fixed_rub", 0) or 0
        try:
            ref_fix_dec = Decimal(ref_fix)
        except Exception:
            ref_fix_dec = Decimal(0)
        if ref_fix_dec > 0:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å—É–º–º–∏—Ä—É–µ–º Decimal
            ref_owner.balance = (Decimal(ref_owner.balance) + ref_fix_dec)
            # –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –ø—Ä–∏—à–µ–¥—à–µ–≥–æ
            who = f"@{username}" if username else (first or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            notices.append((
                ref_owner.tg_id,
                (
                    "üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
                    f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {who}.\n"
                    f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: {int(ref_fix_dec)} ‚ÇΩ.\n"
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º! üôå"
                )
            ))

        # —Å–≤—è–∑–∫–∞
        user.referred_by_user_id = ref_owner.id

    await session.commit()
    return user, notices

# ---------------------------
# Menus (static parents)
# ---------------------------

def main_menu(user: User) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üí∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu:tariffs")],
        [InlineKeyboardButton("üñ• –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="menu:devices")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="menu:ref")]
    ]
    if user.is_admin:
        rows.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu:admin")])
    return kb(rows)

def admin_menu() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin:payments")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")],
    ]
    return kb(rows)

# ---------------------------
# Commands
# ---------------------------
async def _render_main_menu(query_or_message, tg_user):
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏, –ø–ª–∞—Ç–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –∏ —Å—á—ë—Ç—á–∏–∫–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –∏–∑ callback (edit), –∏ –∏–∑ /start (reply).
    """
    # 1) –ë–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    async with async_session() as session:
        u = (await session.execute(
            select(User).where(User.tg_id == tg_user.id)
        )).scalar_one()

        used = (await session.execute(
            select(func.count(Device.id)).where(Device.user_id == u.id)
        )).scalar_one()

    # 2) –ö–≤–æ—Ç—ã
    base_q = int(u.device_quota or 0) if _has_base(u) else 0
    extra_q = int(getattr(u, "extra_devices_count", 0) or 0) if _has_extra(u) else 0
    total_q = max(0, base_q + extra_q)

    # 3) –°—Ç–∞—Ç—É—Å—ã
    sub_line = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {fmt_human(u.subscription_until)}" if _has_base(u) else "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    extra_line = (
        f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã: {extra_q} (–¥–æ {fmt_human(getattr(u, 'extra_devices_until', None))})"
        if extra_q > 0 else
        "üí≥ –ü–ª–∞—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã: –Ω–µ—Ç"
    )
    devices_line = f"üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {used}/{total_q}  ¬∑  üÜì {base_q}  ¬∑  üí≥ {extra_q}"

    # 4) –¢–µ–∫—Å—Ç
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {tg_user.first_name}!\n\n"
        f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_line}\n"
        f"{extra_line}\n"
        f"{devices_line}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {rub(u.balance)}"
    )

    # 5) –ö–Ω–æ–ø–∫–∏
    kbd = main_menu(u)

    # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if hasattr(query_or_message, "edit_message_text"):  # CallbackQuery
        await query_or_message.edit_message_text(text, reply_markup=kbd)
    else:  # Message
        await query_or_message.reply_text(text, reply_markup=kbd)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ref = None
    if context.args and len(context.args) == 1:
        ref = context.args[0]

    async with async_session() as session:
        user, notices = await ensure_user(
            session,
            tg_id=update.effective_user.id,
            username=update.effective_user.username,
            first=update.effective_user.first_name,
            last=update.effective_user.last_name,
            ref_code=ref,
        )

    # —Ä–∞–∑–æ—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for chat_id, text in notices:
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
        except Exception as e:
            print(f"[referral notice] failed to send to {chat_id}: {e}")

    # —Ä–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    await _render_main_menu(update.effective_message, update.effective_user)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/admin ‚Äî –∞–¥–º–∏–Ω–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)",
        reply_markup=kb([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")]]),
    )

async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
        user = res.scalar_one_or_none()
    if not user or not user.is_admin:
        await update.effective_message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await update.effective_message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

# ---------------------------
# Callbacks (hard tree)
# ---------------------------

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    # ---- MAIN ----
    if data == "menu:main":
        await _render_main_menu(update.callback_query, update.effective_user)
        return

    # ---- TARIFFS ----

    if data.startswith("menu:tariffs"):
        async with async_session() as session:
            res = await session.execute(
                select(Tariff).where(Tariff.is_active == True).order_by(Tariff.days)
            )
            tariffs = res.scalars().all()

        rows = [[InlineKeyboardButton(
                    f"{t.name} ‚Äî {rub(t.price)} ({t.max_devices} —É—Å—Ç—Ä.)",
                    callback_data=f"tariff:buy:{t.id}"
                )] for t in tariffs]
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])

        await query.edit_message_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(rows))
        return

    if data.startswith("tariff:buy:"):
        _, _, sid = data.split(":")
        tariff_id = int(sid)

        # 1) –¥–æ—Å—Ç–∞—ë–º —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            t = await session.get(Tariff, tariff_id)
            if not t or not t.is_active:
                await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return

            u = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one()

            # 2) –∑–∞–ø—Ä–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–∏, –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∫–æ–Ω—á–∏–ª–∞—Å—å
            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            if u.subscription_until and u.subscription_until > now:
                until= fmt_human(u.subscription_until)
                #until = u.subscription_until.astimezone(timezone.utc).strftime("%d-%m-%Y %H:%M")
                await query.edit_message_text(
                    f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {until}. \nüí∞ –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")]]),
                )
                return

            try:
                pay = await yk_client.create_payment(
                    float(t.price),
                    settings.currency,
                    f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {t.name} ({t.days} –¥–Ω–µ–π)",
                    settings.yk_return_url,
                    metadata={"tg_id": update.effective_user.id, "purpose": "TARIFF", "tariff_id": t.id},
                )
            except Exception as e:
                await query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂: {e}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")], back_to_main()]),
                )
                return

            confirmation_url = (pay.get("confirmation") or {}).get("confirmation_url")
            if not confirmation_url:
                await query.edit_message_text(
                    "–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")], back_to_main()]),
                )
                return

            # 4) –ø–∏—à–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î
            p = Payment(
                yk_payment_id=pay["id"],
                user_id=u.id,
                status=pay.get("status", "pending"),
                purpose="TARIFF",
                amount=float(t.price),
                currency=settings.currency,
                tariff_id=t.id,
                confirmation_url=confirmation_url,
                meta=pay.get("metadata") or {},
            )
            session.add(p)
            await session.commit()
            price = float(t.price)
            rows = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
            ]
            if float(u.balance) >= price:
                rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º", callback_data=f"paybalance:TARIFF:{t.id}")])

            rows.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"paycheck:{pay['id']}")])
            rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:tariffs")])
        # 5) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        await query.edit_message_text(
            f"üßæ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ {rub(t.price)}.\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=InlineKeyboardMarkup(rows),
        )
        return

    if data.startswith("paycheck:"):
        _, payment_id = data.split(":")
        async with async_session() as session:
            p = (await session.execute(select(Payment).where(Payment.yk_payment_id == payment_id))).scalar_one_or_none()
            if not p:
                await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return

            try:
                info = await yk_client.get_payment(payment_id)
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return

            status = info.get("status", "pending")
            p.status = status
            from datetime import datetime, timezone
            p.updated_at = datetime.now(timezone.utc)

            if status == "succeeded":
                # –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                await _apply_successful_payment(session, p)
                await session.commit()
                await query.edit_message_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="menu:main")]]),
                )
                return

            await session.commit()

        # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å
        rows = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data=f"paycheck:{payment_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:devices")],
        ]
        await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=InlineKeyboardMarkup(rows))
        return

    async def _render_devices_menu(query, user_id: int):
        # 1) –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        async with async_session() as session:
            u = (await session.execute(
                select(M.User).where(M.User.tg_id == user_id)
            )).scalar_one()

            res = await session.execute(
                select(M.Device).where(M.Device.user_id == u.id)
            )
            devices = list(res.scalars().all())

        # 2) –°—á–∏—Ç–∞–µ–º –∫–≤–æ—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        base_q = _base_quota(u)
        extra_q = _extra_quota(u)
        total_q = base_q + extra_q

        # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        devices.sort(key=lambda d: d.created_at or datetime.min.replace(tzinfo=timezone.utc))

        used_total = len(devices)
        used_base = min(used_total, base_q)
        used_paid = max(0, used_total - used_base)

        # 3) –¢–µ–∫—Å—Ç–æ–≤–∞—è —à–∞–ø–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if used_total == 0:
            header = (
                "üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
                f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: 0/{base_q}\n"
                f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: 0/{extra_q}\n"
                f"üìà –í—Å–µ–≥–æ: 0/{total_q}\n\n"
                "–ü–æ–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Ç."
            )
        else:
            header = (
                "üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
                f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: {used_base}/{base_q}\n"
                f"üí≥ –ü–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–æ: {used_paid}/{extra_q}\n"
                f"üìà –í—Å–µ–≥–æ: {used_total}/{total_q}"
            )

        # 4) –ö–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî –∫–∞–∂–¥—É—é —è–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º
        rows: list[list[InlineKeyboardButton]] = []
        for idx, d in enumerate(devices, start=1):
            is_paid = idx > base_q  # –≤—Å—ë, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –±–∞–∑–æ–≤—É—é –∫–≤–æ—Ç—É ‚Äî –ø–ª–∞—Ç–Ω–æ–µ
            icon = "üí≥" if is_paid else "üÜì"
            title = f"{icon} {d.wg_client_name}"
            rows.append([InlineKeyboardButton(title, callback_data=f"device:view:{d.id}")])

        # 5) –î–µ–π—Å—Ç–≤–∏—è
        rows.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="device:add")])
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])

        await query.edit_message_text(header, reply_markup=InlineKeyboardMarkup(rows))


    if data == "menu:devices":
        await _render_devices_menu(query, update.effective_user.id)
        return

    if data == "device:add":
        async with async_session() as session:
            u: M.User = (await session.execute(select(M.User).where(M.User.tg_id == update.effective_user.id))).scalar_one()

            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            base_active = bool(u.subscription_until and u.subscription_until > now)
            if not base_active:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É. \nüñ• –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="menu:tariffs")],
                                    [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu:main")]]),
                )
                return

            # –ø–æ—Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –±–∞–∑–æ–≤—ã—Ö –∏ –¥–æ–ø.
            base_count = (await session.execute(
                select(func.count(M.Device.id)).where(M.Device.user_id == u.id, M.Device.is_extra == False)
            )).scalar_one()
            extra_count = (await session.execute(
                select(func.count(M.Device.id)).where(M.Device.user_id == u.id, M.Device.is_extra == True)
            )).scalar_one()

            base_quota = u.device_quota or 0
            extra_active_count = (u.extra_devices_count or 0) if (u.extra_devices_until and u.extra_devices_until > now) else 0

            # –†–µ—à–∞–µ–º, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if base_count < base_quota:
                # —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                name = f"user{u.id}-{base_count+1}"
                peer = await wg_client.create_client(name=name)

                d = M.Device(
                    user_id=u.id,
                    wg_client_id=str(peer.get("id") or peer.get("clientId") or peer.get("_id")),
                    wg_client_name=peer.get("name", name),
                    is_extra=False,
                )
                session.add(d)
                await session.commit()

                # –æ—Ç—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                try:
                    cfg = await wg_client.get_config(d.wg_client_id)
                    bio = io.BytesIO(cfg.encode("utf-8"))
                    bio.name = f"{d.wg_client_name}.conf"
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
                except Exception:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ WG-Easy UI.")

                await _render_devices_menu(query, update.effective_user.id)
                return

            # –±–∞–∑–æ–≤–∞—è –∫–≤–æ—Ç–∞ –∑–∞–±–∏—Ç–∞ -> –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø?
            if extra_count < extra_active_count:
                # –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -> —Å–æ–∑–¥–∞—ë–º –¥–æ–ø
                name = f"user{u.id}-extra{extra_count+1}"
                peer = await wg_client.create_client(name=name)

                d = M.Device(
                    user_id=u.id,
                    wg_client_id=str(peer.get("id") or peer.get("clientId") or peer.get("_id")),
                    wg_client_name=peer.get("name", name),
                    is_extra=True,
                )
                session.add(d)
                await session.commit()

                try:
                    cfg = await wg_client.get_config(d.wg_client_id)
                    bio = io.BytesIO(cfg.encode("utf-8"))
                    bio.name = f"{d.wg_client_name}.conf"
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
                except Exception:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ WG-Easy UI.")

                await _render_devices_menu(query, update.effective_user.id)
                return

            # –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å
            from decimal import Decimal
            price = Decimal(settings.device_extra_price)
            pay = await yk_client.create_payment(
                float(price), settings.currency, "–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (1 –º–µ—Å.)", settings.yk_return_url,
                metadata={"tg_id": update.effective_user.id, "purpose": "EXTRA_DEVICE"}
            )
            p = M.Payment(
                yk_payment_id=pay["id"],
                user_id=u.id,
                status=pay.get("status", "pending"),
                purpose="EXTRA_DEVICE",
                amount=float(price),
                currency=settings.currency,
                confirmation_url=pay.get("confirmation", {}).get("confirmation_url", ""),
            )
            session.add(p)
            await session.commit()

            rows = []
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º"
            # –ö–Ω–æ–ø–∫–∞ YooKassa (–æ—Å–Ω–æ–≤–Ω–∞—è)
            rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=p.confirmation_url)])

            if Decimal(u.balance) >= price:
                rows.append([InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º", callback_data="paybalance:EXTRA_DEVICE:-")])

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            rows.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"paycheck:{p.yk_payment_id}")])
            rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:devices")])
            rows.append([InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu:main")])

            await query.edit_message_text(
                (
                    "üîì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.\n"
                    f"‚ûï –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç –¥–ª—è 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ {rub(price)}.\n\n"
                    "‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* 30 –¥–Ω–µ–π.\n"
                    "üí° *–í–∞–∂–Ω–æ:* –≤—Å–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–ø-—Å–ª–æ—Ç—ã –∏–º–µ—é—Ç _–æ–±—â–∏–π_ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è. "
                    "–î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –∫—É–ø–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏, –æ–Ω–∏ –∏—Å—Ç–µ–∫—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî "
                    "–ø–æ –µ–¥–∏–Ω–æ–π –¥–∞—Ç–µ ¬´–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                    "‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, "
                    "–∞ —Å—Ä–æ–∫ –¥–æ–ø-—Å–ª–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–¥—Ç–∏."
                ),
                reply_markup=InlineKeyboardMarkup(rows),
                parse_mode="Markdown",
            )
            return

    if data.startswith("device:view:"):
        try:
            await query.answer()
        except Exception:
            pass
        _, _, sid = data.split(":")
        dev_id = int(sid)
        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
        if not d:
            await query.edit_message_text("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
            return
        rows = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"device:cfg:{dev_id}")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"device:del:{dev_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:devices")],
        ]
        await query.edit_message_text(f"üñ• –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {d.wg_client_name}", reply_markup=InlineKeyboardMarkup(rows))
        return

    if data.startswith("device:cfg:"):
        _, _, sid = data.split(":")
        dev_id = int(sid)
        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
            if not d:
                await query.edit_message_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return
            try:
                cfg = await wg_client.get_config(d.wg_client_id)
                bio = io.BytesIO(cfg.encode("utf-8")); bio.name = f"{d.wg_client_name}.conf"
                await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio))
            except WGEasyError as e:
                # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å 404 ‚Äî –∑–Ω–∞—á–∏—Ç peer —É–∂–µ —É–¥–∞–ª—ë–Ω –≤ UI
                if " 404:" in str(e) or "Cannot find" in str(e):
                    await context.bot.send_message(chat_id=update.effective_chat.id,
                                                text="–ü–∏—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ WG-Easy. –£–¥–∞–ª—è—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã‚Ä¶")
                    await session.delete(d)
                    await session.commit()
                    # –í–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    await _render_devices_menu(query, update.effective_user.id)
                    return
                # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
            # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏–º –º–µ–Ω—é
            await _render_devices_menu(query, update.effective_user.id)
            return

    if data.startswith("device:del:"):
        try:
            await query.answer()
        except Exception:
            pass
        _, _, sid = data.split(":")
        dev_id = int(sid)
        async with async_session() as session:
            d = await session.get(M.Device, dev_id)
            if not d:
                await query.edit_message_text("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                return
            if d.wg_client_id:
                try:
                    await wg_client.delete_client(d.wg_client_id)
                except Exception as e:
                    await query.edit_message_text(f"WG API –æ—à–∏–±–∫–∞: {e}", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return
            await session.delete(d)
            await session.commit()

        await query.edit_message_text(
            "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üñ• –ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data="menu:devices")], back_to_main()]),
        )
        return

    # ---- PAY BY BALANCE ----
    if data.startswith("paybalance:"):
        # —Ñ–æ—Ä–º–∞—Ç—ã: paybalance:TARIFF:<tariff_id>  –∏–ª–∏  paybalance:EXTRA_DEVICE:-
        _, purpose, sid = data.split(":")
        async with async_session() as session:
            u = (await session.execute(
                select(User).where(User.tg_id == update.effective_user.id)
            )).scalar_one()

            from decimal import Decimal
            from datetime import datetime, timezone

            if purpose == "TARIFF":
                tariff_id = int(sid)
                t = await session.get(Tariff, tariff_id)
                if not t:
                    await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return
                price = Decimal(str(t.price))
                if Decimal(u.balance) < price:
                    await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return

                # —Å–ø–∏—Å—ã–≤–∞–µ–º
                u.balance = (Decimal(u.balance) - price)

                # —Å–æ–∑–¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞—Ç–µ–∂ (succeeded)
                p = Payment(
                    yk_payment_id=None,
                    user_id=u.id,
                    status="succeeded",
                    purpose="TARIFF",
                    amount=float(price),
                    currency=settings.currency,
                    tariff_id=t.id,
                    confirmation_url=None,
                    meta={"paid_by_balance": True, "used_balance": float(price)},
                )
                session.add(p)
                await session.commit()

                # –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–æ
                await _apply_successful_payment(session, p)
                await session.commit()

                await query.edit_message_text(
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–æ–ø–ª–∞—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–º)",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu:main")]])
                )
                return

            if purpose == "EXTRA_DEVICE":
                price = Decimal(str(settings.device_extra_price))
                if Decimal(u.balance) < price:
                    await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
                    return

                # —Å–ø–∏—Å—ã–≤–∞–µ–º
                u.balance = (Decimal(u.balance) - price)

                p = Payment(
                    yk_payment_id=None,
                    user_id=u.id,
                    status="succeeded",
                    purpose="EXTRA_DEVICE",
                    amount=float(price),
                    currency=settings.currency,
                    tariff_id=None,
                    confirmation_url=None,
                    meta={"paid_by_balance": True, "used_balance": float(price)},
                )
                session.add(p)
                await session.commit()

                await _apply_successful_payment(session, p)
                await session.commit()

                await query.edit_message_text(
                    "‚úÖ –î–æ–ø. —Å–ª–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–ø–ª–∞—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–º)",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data="menu:devices")]])
                )
                return
    # ---- REF ----
    if data == "menu:ref":
        async with async_session() as session:
            u = (await session.execute(select(User).where(User.tg_id == update.effective_user.id))).scalar_one()
        me = await context.bot.get_me()
        deep = f"https://t.me/{me.username}?start={u.referral_code}"

        trial = settings.ref_trial_days
        ref_fix = settings.ref_referrer_fixed_rub

        txt = (
            "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"‚Ä¢ –î–∞–π –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É: {deep}\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ {trial} –¥–Ω. (–∞–≤—Ç–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è)\n"
            f"‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {ref_fix} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É\n\n"
            "–ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ–ø-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
            "–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º¬ª."
        )
        await query.edit_message_text(txt, reply_markup=InlineKeyboardMarkup([back_to_main()]))
        return

    # ---- ADMIN ----

    if data == "menu:admin":
        # –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞
        async with async_session() as session:
            res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
            user = res.scalar_one_or_none()
        if not user or not user.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_main()]))
            return
        await query.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    if data.startswith("admin:payments:period:"):
        _, _, _, kind = data.split(":")  # today|month|year|all
        await _render_admin_payments(update.callback_query, update.effective_user.id, kind)
        return

    if data == "admin:payments":
        await _render_admin_payments(update.callback_query, update.effective_user.id, "today")
        return

    if data == "admin:stats":
        # –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ –∏ –≤ 'menu:admin'
        async with async_session() as session:
            res = await session.execute(select(User).where(User.tg_id == update.effective_user.id))
            admin = res.scalar_one_or_none()
        if not admin or not admin.is_admin:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", reply_markup=InlineKeyboardMarkup([back_to_admin()]))
            return
        from datetime import datetime, timezone
        # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º —Å–≤–æ–¥–∫—É + –∫–Ω–æ–ø–∫–∏
        async with async_session() as session:
            now = datetime.now(timezone.utc)

            # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            all_users = (await session.execute(select(func.count(User.id)))).scalar_one()

            # –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ò–õ–ò –∞–∫—Ç–∏–≤–Ω—ã –¥–æ–ø. —Å–ª–æ—Ç—ã
            users_active = (await session.execute(
                select(func.count(User.id)).where(
                    or_(
                        and_(User.subscription_until.is_not(None), User.subscription_until > now),
                        and_(User.extra_devices_until.is_not(None), User.extra_devices_until > now),
                    )
                )
            )).scalar_one()

            users_inactive = all_users - users_active

            # –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (enabled = true)
            active_devices = (await session.execute(
                select(func.count(Device.id)).where(Device.enabled.is_(True))
            )).scalar_one()

        text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{all_users}*\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_active}*\n"
            f"‚ö™Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_inactive}*\n"
            f"üñ• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: *{active_devices}*"
        )

        kb = InlineKeyboardMarkup([
            back_to_admin()
        ])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup, parse_mode="Markdown")
        return

    # catch-all
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=InlineKeyboardMarkup([back_to_main()]))

# ---------------------------
# Background polling (optional)
# ---------------------------

async def _apply_successful_payment(session: AsyncSession, p: Payment) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É.
    - TARIFF: –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–≤–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É.
    - TOPUP: –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ —Ä–µ—à–∏—à—å –æ–ø—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å).
    - EXTRA_DEVICE: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–æ–º–µ—Å—è—á–Ω–æ), –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫.
    """
    u = await session.get(User, p.user_id)

    if p.purpose == "TARIFF" and p.tariff_id:
        t = await session.get(Tariff, p.tariff_id)
        now = datetime.now(timezone.utc)

        # –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        sub_until = u.subscription_until or now
        if sub_until < now:
            sub_until = now
        sub_until = sub_until + timedelta(days=t.days)
        u.subscription_until = sub_until

        # –∫–≤–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        u.device_quota = t.max_devices

        # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
        if u.referred_by_user_id:
            bonus = (Decimal(p.amount) * Decimal(     # p.amount ‚Äî float -> Decimal
                getattr(__import__("app.config", fromlist=["settings"]).config.settings, "referral_bonus_percent", 0)
            ) / Decimal(100)).quantize(Decimal("0.01"))
            ref_user = await session.get(User, u.referred_by_user_id)
            ref_user.balance = (Decimal(ref_user.balance or 0) + bonus)

    elif p.purpose == "TOPUP":
        u.balance = (Decimal(u.balance or 0) + Decimal(p.amount))

    elif p.purpose == "EXTRA_DEVICE":
        now = datetime.now(timezone.utc)

        # –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤: +30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–∞ (–∏–ª–∏ –æ—Ç —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ)
        current_until = u.extra_devices_until or now
        if current_until < now:
            current_until = now
        u.extra_devices_until = current_until + timedelta(days=30)

        # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        u.extra_devices_count = (u.extra_devices_count or 0) + 1

async def poll_pending_payments(context: ContextTypes.DEFAULT_TYPE):
    async with async_session() as session:
        res = await session.execute(select(Payment).where(Payment.status == "pending").order_by(Payment.created_at).limit(20))
        pending = res.scalars().all()
        for p in pending:
            try:
                info = await yk_client.get_payment(p.yk_payment_id)
            except Exception:
                continue
            status = info.get("status", "pending")
            if status != p.status:
                p.status = status
                p.updated_at = datetime.now(timezone.utc)
                if status == "succeeded":
                    await _apply_successful_payment(session, p)
        await session.commit()

# ---------------------------
# Registration
# ---------------------------

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))
